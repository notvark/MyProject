@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using MyProject.Components.Account.Shared
@using MyProject.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<div class="d-flex justify-content-center align-items-center vh-100 custom-primary-background-color">
    <div class="card custom-primary-login-card-border" style="max-width: 500px; width: 100%;">
        <div class="card-body custom-primary-login-card">
            <h4 class="card-title custom-primary-white-text-color">Register</h4>
            <EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
                <div class="row g-3">
                    <div class="col-md-12">
                        <label for="email" class="form-label custom-primary-white-text-color">Email</label>
                        <InputText class="form-control" placeholder="Email" @bind-Value="Model.Email" />
                    </div>
                    <div class="col-md-12">
                        <label for="password" class="form-label custom-primary-white-text-color">Password</label>
                        <InputText type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                    </div>
                    <div class="col-md-12">
                        <label for="name" class="form-label custom-primary-white-text-color">Confirm Password</label>
                        <InputText type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                    </div>
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary w-100">Register</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        var user = Activator.CreateInstance<User>(); ;
        await UserStore.SetUserNameAsync(user, Model.Email, CancellationToken.None);
        var emailStore = (IUserEmailStore<User>)UserStore;
        await emailStore.SetEmailAsync(user, Model.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Model.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        public string Email { get; set; } = "";

        public string Password { get; set; } = "";

        public string ConfirmPassword { get; set; } = "";
    }
}
