@page "/Home/Settings"

@using MyProject.Context
@using MyProject.Model;
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

@inject PostProvider postProvider
@inject PostCommentProvider postCommentProvider
@inject UserManager<User> userManager
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject SignInManager<User> SignInManager

<h3 class="custom-primary-white-text-color">Settings</h3>

<div class="card-body custom-primary-background-color row">
    <div class="p-3 col">
        <EditForm Model="@User" OnValidSubmit="@HandleUpdate">

            <div class="row mb-2">
                <div class="col-6">
                    <label for="UserEmail" class="form-label custom-primary-white-text-color">Email</label>
                    <InputText id="UserEmail" class="form-control" @bind-Value="User.Email" />
                </div>
                <div class="col-6">
                    <label for="PhoneNumber" class="form-label custom-primary-white-text-color">Phone Number</label>
                    <InputText id="PhoneNumber" class="form-control" @bind-Value="User.PhoneNumber" />
                </div>
            </div>

            <div class="row mb-2">
                <div class="col-12">
                    <label for="UserName" class="form-label custom-primary-white-text-color">Username</label>
                    <InputText id="UserName" class="form-control" @bind-Value="User.UserName" />
                </div>
            </div>

            <div class="row mb-2">
                <div class="col-12">
                    <label for="Password" class="form-label custom-primary-white-text-color">Password</label>
                    <InputText id="Password" class="form-control" @bind-Value="Password" type="password" />
                </div>
            </div>

            <div class="pt-2">
                <button type="submit" class="btn btn-success w-100">Update</button>
            </div>

        </EditForm>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(feedbackMessage) && activeAlert)
{
    <p class="mt-2 @(isSuccessful ? "alert alert-primary" : "alert alert-danger")">@feedbackMessage</p>
}

@code {
    private User User { get; set; } = new();
    private string feedbackMessage;
    private bool isSuccessful;
    private bool activeAlert;
    private string Password { get; set; } = string.Empty;
    private bool isThisThePassword;

    protected override async Task OnInitializedAsync()
    {
        var context = httpContextAccessor.HttpContext;

        if (context != null && context.User.Identity != null && context.User.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(context.User);
            if (currentUser != null)
            {
                User = currentUser;
            }
        }
    }

    private async Task DisposeAlert()
    {
        await Task.Delay(2000);
        activeAlert = false;
        feedbackMessage = string.Empty;
        StateHasChanged();
    }

    private async Task HandleUpdate()
    {
        if (string.IsNullOrWhiteSpace(Password))
        {
            feedbackMessage = "Password cannot be empty.";
            await DisposeAlert();
            return;
        }

        if (await VerifyPasswordAsync(Password));
        {
            feedbackMessage = "Incorrect password.";
            await DisposeAlert();
            return;
        }

        var existingUserByUsername = await userManager.FindByNameAsync(User.UserName);
        if (existingUserByUsername != null && existingUserByUsername.Id != User.Id)
        {
            feedbackMessage = "This username is already taken. Please choose another one.";
            await DisposeAlert();
            return;
        }

        var existingUserByEmail = await userManager.FindByEmailAsync(User.Email);
        if (existingUserByEmail != null && existingUserByEmail.Id != User.Id)
        {
            feedbackMessage = "This email is already taken. Please choose another one.";
            await DisposeAlert();
            return;
        }

        var result = await userManager.UpdateAsync(User);

        if (result.Succeeded)
        {
            feedbackMessage = "User information updated successfully!";
            isSuccessful = true;
        }

        else
        {
            feedbackMessage = "Error updating user: " + string.Join(", ", result.Errors.Select(e => e.Description));
            isSuccessful = false;
        }

        await DisposeAlert();
    }

    private async Task<bool> VerifyPasswordAsync(string enteredPassword)
    {
        var result = await SignInManager.PasswordSignInAsync(User.Email, Password, false, lockoutOnFailure: false);
        return result.Succeeded;
    }
}
