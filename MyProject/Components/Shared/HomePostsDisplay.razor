@using MyProject.Context
@using MyProject.Model;
@using MyProject.Components.Shared
@using Microsoft.AspNetCore.Http @*For retrieving client ID*@
@using Microsoft.AspNetCore.Identity @*For retrieving client ID*@
@using Microsoft.AspNetCore.Components.Authorization @*Page only accessible by those authorized*@
@inherits LayoutComponentBase


@inject PostProvider PostProvider;
@inject PostCommentProvider PostCommentProvider;
@inject NavigationManager NavigationManager;
@inject UserManager<User> userManager;
@*For retrieving client ID*@
@inject IHttpContextAccessor httpContextAccessor;
@*For retrieving client ID*@

<div class="d-flex justify-content-center p-2">
    <ul class="list-group" style="max-width: 800px; width: 100%;">
        @foreach (var post in posts)
        {
            <div class="card mb-3 text-light position-relative" style="background-color: black; border-radius: 8px; width: 800px;">
                <div class="card-body">
                    <div class="position-absolute top-0 end-0 p-2">
                        <a href="/profile/@post.User.UserName">
                            @post.User.UserName
                        </a>
                    </div>
                    <h3 class="card-title"><strong>@post.Title</strong></h3>
                    <p class="card-text">@post.Description</p>
                    <div class="custom-comment-separate-line" />

                    <EditForm Model="@PostComment" OnValidSubmit="@HandleSubmit(post.Id)">
                        <div class="col-12">
                            <input type="text" class="form-control" @bind="PostComment.Comment" placeholder="Comment..." aria-label="PostContent">
                        </div>
                        <div class="col-md-12">
                            <button type="submit" class="btn btn-success w-100">Save Note</button>
                        </div>
                    </EditForm>

                    @*Add comments section*@


                </div>
            </div>
        }
    </ul>
</div>

@code {

    private User User { get; set; } 
    private Post Post { get; set; } = new Post();
    private List<Post> posts;

    private PostComment PostComment { get; set; } = new PostComment();
    private List<PostComment> postcomments;

    protected override async Task OnInitializedAsync()
    {

        posts = await PostProvider.GetAllPostsAsync();
        postcomments = await PostCommentProvider.GetCommentByPostAsync(Post);

    }

    private async Task HandleSubmit(int postId)
    {
        if (string.IsNullOrWhiteSpace(PostComment.Comment))
        {
            return;
        }

        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post == null)
        {
            return;
        }

        var currentUser = await userManager.GetUserAsync(httpContextAccessor.HttpContext.User);
        if (currentUser == null)
        {
            return;
        }

        PostComment.Post = post;
        PostComment.User = currentUser;
        PostComment.CommentSentTime = DateTime.UtcNow;

        await PostCommentProvider.AddPostCommentAsync(PostComment);
        PostComment = new PostComment(); //removes input from form

        postcomments = await PostCommentProvider.GetCommentByPostAsync(Post); //refreshes notes without issues

    }

}

