@using MyProject.Context
@using MyProject.Model;
@using MyProject.Components.Shared
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Http 
@using Microsoft.AspNetCore.Identity 
@using Microsoft.AspNetCore.Components.Authorization 


@inject PostProvider PostProvider;
@inject DatabaseContext DatabaseContext;
@inject PostCommentProvider PostCommentProvider;
@inject NavigationManager NavigationManager;
@inject UserManager<User> userManager;
@inject IHttpContextAccessor httpContextAccessor;

<div class="d-flex justify-content-center p-2">
    <ul class="list-group" style="max-width: 800px; width: 100%;">
        @foreach (var post in posts)
        {
            <div class="card mb-3 text-light positive-relative" style="background-color: black; border-radius: 8px; width: 800px;">
                <div class="card-body">

                    <div class="position-absolute top-0 end-0 p-2">

                        @{
                            var userName = ReturnAuthorOfPosts(post);
                        }

                        <div>
                            <i class="fas fa-user user-icon"></i>
                            <a href="/profile/@userName" class="user-link">@userName</a>
                        </div>

                    </div>

                    <div>
                        <h3 class="card-title"><strong>@post.Title</strong></h3>
                        <p class="card-text">@post.Description</p>
                    </div>

                    <div class="custom-comment-separate-line"></div>

                    <div class="mt-3 mb-3">
                        <a href="/Forums/Comment/@post.Id" class="btn btn-primary btn-sm">
                            <i class="fas fa-comment"></i> Comment (@ReturnCommentCount(post))
                        </a>
                    </div>

                    <footer class="mt-2">Post Created : @post.PostCreatedAt</footer>

                </div>
            </div>
        }
    </ul>
</div>


@code {

    private User User { get; set; }
    private Post Post { get; set; } = new Post();
    private List<Post> posts;

    private PostComment PostComment { get; set; } = new PostComment();
    private List<PostComment> postcomments;

    protected override async Task OnInitializedAsync()
    {
        posts = await PostProvider.GetAllPostsAsync();
        postcomments = await PostCommentProvider.GetCommentByPostAsync(Post);
    }

    private int ReturnCommentCount(Post post)
    {
        return PostCommentProvider.CountCommentsForPostAsync(post);
    }

    private string ReturnAuthorOfPosts(Post post)
    {
        return PostProvider.GetUserByPost(post);
    }



}

