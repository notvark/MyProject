@using MyProject.Context
@using MyProject.Model;
@using Microsoft.AspNetCore.Http @*For retrieving client ID*@
@using Microsoft.AspNetCore.Identity @*For retrieving client ID*@
@using Microsoft.AspNetCore.Components.Authorization @*Page only accessible by those authorized*@
@inherits LayoutComponentBase


@inject PostProvider PostProvider;
@inject PostCommentProvider PostCommentProvider;
@inject NavigationManager NavigationManager;
@inject UserManager<User> userManager;
@*For retrieving client ID*@
@inject IHttpContextAccessor httpContextAccessor;
@*For retrieving client ID*@


<EditForm Model="@Post" OnValidSubmit="@HandleSubmit">
    <div class="d-flex justify-content-center p-2">
        <div class="card custom-primary-post-card-border" style="max-width: 800px; width: 100%;">
            <div class="card-body custom-primary-background-color">
                <h4 class="card-title custom-primary-white-text-color">Create Post</h4>
                <div class="row g-3">
                    <div class="col-12">
                        <input type="text" class="form-control" @bind="Post.Title" placeholder="Title" aria-label="PostTitle">
                    </div>
                    <div class="col-12">
                        <input type="text" class="form-control" @bind="Post.Description" placeholder="Description" aria-label="PostContent">
                    </div>
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-success w-100">Save Post</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<div class="d-flex justify-content-center p-2">
    <ul class="list-group" style="max-width: 800px; width: 100%;">
        @foreach (var post in posts)
        {
            <div class="card mb-3 text-light position-relative" style="background-color: black; border-radius: 8px; width: 800px;">
                <div class="card-body">

                    <div>
                        <h3 class="card-title"><strong>@post.Title</strong></h3>
                        <p class="card-text">@post.Description</p>
                    </div>

                    <div class="custom-comment-separate-line"></div>

                    <div class="mt-3 mb-3">
                        <button class="btn btn-danger btn-sm mt-1" @onclick="() => DeletePost(post)">Delete</button>

                        <a href="/Forums/Comment/@post.Id" class="btn btn-primary btn-sm mt-1">
                            @(postCommentCounts.TryGetValue(post.Id, out var commentCount) ? $"View Comments ({commentCount})" : "View Comments (0)")
                        </a>
                    </div>

                    <footer class="mt-2">Post Created : @post.PostCreatedAt</footer>

                </div>
            </div>
        }
    </ul>
</div>





@code {

    private User UserId { get; set; } //To transfer value from function above
    private Post Post { get; set; } = new Post();
    private List<Post> posts;
    private Dictionary<int, int> postCommentCounts = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        var context = httpContextAccessor.HttpContext;
        var currentUser = await userManager.GetUserAsync(context.User);
        UserId = currentUser; // Can't be null, page only accessible by Authorized Users, ignore

        posts = await PostProvider.GetPostByUserAsync(UserId);

        foreach (var post in posts)
        {
            var comments = await PostCommentProvider.GetCommentByPostAsync(post);
            postCommentCounts[post.Id] = comments.Count;
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(Post.Title) || string.IsNullOrWhiteSpace(Post.Description))
        {
            return;
        }


        Post.User = UserId;
        Post.PostCreatedAt = DateTime.Now;

        await PostProvider.AddPostAsync(Post);
        Post = new Post(); //removes input from form
        posts = await PostProvider.GetPostByUserAsync(UserId); //refreshes posts without issues


    }

    private async Task DeletePost(Post post)
    {
        await PostProvider.DeletePostAsync(post);
        posts = await PostProvider.GetPostByUserAsync(UserId); //refreshes posts without issues
    }
}

